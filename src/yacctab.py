
# yacctab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'crateleftLORleftLANDleftORleftXORleftANDleftEQNEleftGTGELTLEleftRSHIFTLSHIFTleftPLUSMINUSleftTIMESDIVIDEMODABSTRACT ALIGNOF AND ANDEQUAL ARROW AS BECOME BOX BREAK BYTE_CONST CATCH CHAR_CONST COLON COMMA CONDOP CONST CONTINUE CRATE DEFAULT DIVEQUAL DIVIDE DO DOTDOT ELLIPSIS ELSE ENUM EQ EQUALS EXTERN FALSE FINAL FLOAT_CONST FN FOR GE GT I16 I32 I64 I8 ID IF IMPL IN INNER_DOC_COMMENT INT_CONST_BIN INT_CONST_DEC INT_CONST_HEX INT_CONST_OCT LAND LBRACE LBRACKET LE LET LOOP LOR LPAREN LSHIFT LSHIFTEQUAL LT MACRO MAIN MATCH MATCHEQUAL MINUS MINUSEQUAL MOD MODULUS MODULUSEQUAL MOVE MUT NE NOT OFFSETOF OR OREQUAL OUTER_DOC_COMMENT OVERRIDE PATTERNATCHAR PERIOD PLUS PLUSEQUAL PRIV PROC PUB PURE RBRACE RBRACKET REF RETURN RPAREN RSHIFT RSHIFTEQUAL SELF SEMI SHEBANG SHEBANG_LINE SIZEOF STATIC STATIC_LIFETIME STRING_LITERAL STRUCT SUPER TIMES TIMESEQUAL TRAIT TRUE TYPE TYPEID TYPEOF U16 U32 U64 U8 UNDERSCORE UNION UNSAFE UNSIZED USE VIRTUAL WHERE WHILE XOR XOREQUAL YIELD\n            crate : FN MAIN LPAREN RPAREN compoundStmt\n        \n            compoundStmt : lbrace stmt_list rbrace \n                         \n        \n            lbrace : LBRACE\n        \n            rbrace : RBRACE\n         stmt_list : stmt\n                      | stmt stmt_list\n        \n            stmt : declaration\n                 | selectionStmt\n                 | iterationStmt\n                 | compoundStmt\n                 | empty\n        \n            selectionStmt : IF conditionStmt compoundStmt\n                          | IF conditionStmt compoundStmt ELSE compoundStmt \n        \n            iterationStmt : WHILE conditionStmt compoundStmt\n        \n            conditionStmt : expression\n                          | expression logicalOp expression\n        \n            expression : relationalExpr\n                       | logicalExpr\n                       | arithExpr\n        \n            relationalExpr : arithExpr relationalOp arithExpr\n        \n            logicalExpr : arithExpr relationalOp arithExpr\n        \n            logicalOp : LAND\n                      | LOR\n        \n            relationalOp : LT\n                         | GT\n                         | LE\n                         | GE\n                         | NE\n                         | EQ\n        \n            declaration : LET variable COLON dataType EQUALS expression SEMI\n                        | LET MUT variable COLON dataType EQUALS expression SEMI\n        \n            dataType : I8\n                     | I16\n                     | I32\n                     | I64\n                     | U8\n                     | U16\n                     | U32\n                     | U64\n        \n            variable : ID\n        \n            arithExpr : arithExpr PLUS arithExpr\n                      | arithExpr MINUS arithExpr\n                      | arithExpr2\n        \n            arithExpr2 : arithExpr2 TIMES arithExpr2\n                       | arithExpr2 DIVIDE arithExpr2\n                       | arithExpr3 \n        \n            arithExpr3 : ID\n                       | number\n                       | LPAREN arithExpr RPAREN\n                       | unaryOperation\n        \n            number : BYTE_CONST\n                   | INT_CONST_DEC\n                   | INT_CONST_OCT \n                   | INT_CONST_HEX \n                   | INT_CONST_BIN\n                   | FLOAT_CONST\n        \n            unaryOperation : ID unaryOperator ID\n                           | ID unaryOperator number\n                           | ID unaryOperator LPAREN arithExpr RPAREN\n        \n            unaryOperator : PLUSEQUAL\n                          | MINUSEQUAL\n                          | TIMESEQUAL\n                          | DIVEQUAL\n                          | MODULUSEQUAL\n                          | LSHIFTEQUAL\n                          | RSHIFTEQUAL\n                          | ANDEQUAL\n                          | OREQUAL\n                          | XOREQUAL\n        empty : '
    
_lr_action_items = {'MODULUSEQUAL':([27,],[54,]),'PLUS':([21,23,24,25,26,27,28,30,32,33,34,35,43,73,75,76,78,79,80,81,82,94,98,],[-55,-53,-52,-51,-48,-47,-54,-56,-46,-43,68,-50,68,-49,-58,-57,-44,-45,-42,68,-41,68,-59,]),'GT':([21,23,24,25,26,27,28,30,32,33,34,35,73,75,76,78,79,80,82,98,],[-55,-53,-52,-51,-48,-47,-54,-56,-46,-43,67,-50,-49,-58,-57,-44,-45,-42,-41,-59,]),'LPAREN':([3,10,15,22,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,97,99,],[4,22,22,22,-60,-66,-62,-61,-69,74,-63,-67,-68,-65,-64,-22,22,-23,22,22,-28,22,-26,-29,22,-24,-25,22,-27,22,22,22,]),'MINUSEQUAL':([27,],[47,]),'TIMES':([21,23,24,25,26,27,28,30,32,33,35,73,75,76,78,79,98,],[-55,-53,-52,-51,-48,-47,-54,-56,-46,59,-50,-49,-58,-57,-44,-45,-59,]),'INT_CONST_DEC':([10,15,22,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,97,99,],[24,24,24,-60,-66,-62,-61,-69,24,-63,-67,-68,-65,-64,-22,24,-23,24,24,-28,24,-26,-29,24,-24,-25,24,-27,24,24,24,]),'BYTE_CONST':([10,15,22,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,97,99,],[25,25,25,-60,-66,-62,-61,-69,25,-63,-67,-68,-65,-64,-22,25,-23,25,25,-28,25,-26,-29,25,-24,-25,25,-27,25,25,25,]),'DIVIDE':([21,23,24,25,26,27,28,30,32,33,35,73,75,76,78,79,98,],[-55,-53,-52,-51,-48,-47,-54,-56,-46,60,-50,-49,-58,-57,-44,-45,-59,]),'MUT':([16,],[41,]),'LSHIFTEQUAL':([27,],[53,]),'MINUS':([21,23,24,25,26,27,28,30,32,33,34,35,43,73,75,76,78,79,80,81,82,94,98,],[-55,-53,-52,-51,-48,-47,-54,-56,-46,-43,62,-50,62,-49,-58,-57,-44,-45,-42,62,-41,62,-59,]),'INT_CONST_HEX':([10,15,22,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,97,99,],[28,28,28,-60,-66,-62,-61,-69,28,-63,-67,-68,-65,-64,-22,28,-23,28,28,-28,28,-26,-29,28,-24,-25,28,-27,28,28,28,]),'FLOAT_CONST':([10,15,22,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,97,99,],[30,30,30,-60,-66,-62,-61,-69,30,-63,-67,-68,-65,-64,-22,30,-23,30,30,-28,30,-26,-29,30,-24,-25,30,-27,30,30,30,]),'LBRACE':([5,7,8,9,11,12,13,17,18,19,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,55,70,73,75,76,77,78,79,80,81,82,83,95,98,102,103,],[8,8,-3,-8,-9,-7,8,-11,-10,-18,-17,-55,-53,-52,-51,-48,-47,-54,8,-56,-15,-46,-43,-19,-50,-2,-4,8,-14,-12,-49,-58,-57,-16,-44,-45,-42,-20,-41,8,-13,-59,-30,-31,]),'RBRACE':([7,8,9,11,12,13,14,17,18,36,37,38,55,70,95,102,103,],[-70,-3,-8,-9,-7,-5,38,-11,-10,-6,-2,-4,-14,-12,-13,-30,-31,]),'RSHIFTEQUAL':([27,],[45,]),'FN':([0,],[2,]),'I32':([72,84,],[92,92,]),'RPAREN':([4,21,23,24,25,26,27,28,30,32,33,35,43,73,75,76,78,79,80,82,94,98,],[5,-55,-53,-52,-51,-48,-47,-54,-56,-46,-43,-50,73,-49,-58,-57,-44,-45,-42,-41,98,-59,]),'EQUALS':([85,86,87,88,89,90,91,92,93,96,],[-35,-32,97,-37,-39,-36,-38,-34,-33,99,]),'LET':([7,8,9,11,12,13,17,18,37,38,55,70,95,102,103,],[16,-3,-8,-9,-7,16,-11,-10,-2,-4,-14,-12,-13,-30,-31,]),'OREQUAL':([27,],[52,]),'LE':([21,23,24,25,26,27,28,30,32,33,34,35,73,75,76,78,79,80,82,98,],[-55,-53,-52,-51,-48,-47,-54,-56,-46,-43,63,-50,-49,-58,-57,-44,-45,-42,-41,-59,]),'EQ':([21,23,24,25,26,27,28,30,32,33,34,35,73,75,76,78,79,80,82,98,],[-55,-53,-52,-51,-48,-47,-54,-56,-46,-43,64,-50,-49,-58,-57,-44,-45,-42,-41,-59,]),'INT_CONST_BIN':([10,15,22,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,97,99,],[21,21,21,-60,-66,-62,-61,-69,21,-63,-67,-68,-65,-64,-22,21,-23,21,21,-28,21,-26,-29,21,-24,-25,21,-27,21,21,21,]),'$end':([1,6,37,38,],[0,-1,-2,-4,]),'ELSE':([37,38,70,],[-2,-4,83,]),'SEMI':([19,20,21,23,24,25,26,27,28,30,32,33,34,35,73,75,76,78,79,80,81,82,98,100,101,],[-18,-17,-55,-53,-52,-51,-48,-47,-54,-56,-46,-43,-19,-50,-49,-58,-57,-44,-45,-42,-20,-41,-59,102,103,]),'PLUSEQUAL':([27,],[44,]),'TIMESEQUAL':([27,],[46,]),'I8':([72,84,],[86,86,]),'WHILE':([7,8,9,11,12,13,17,18,37,38,55,70,95,102,103,],[10,-3,-8,-9,-7,10,-11,-10,-2,-4,-14,-12,-13,-30,-31,]),'I16':([72,84,],[93,93,]),'I64':([72,84,],[85,85,]),'INT_CONST_OCT':([10,15,22,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,97,99,],[23,23,23,-60,-66,-62,-61,-69,23,-63,-67,-68,-65,-64,-22,23,-23,23,23,-28,23,-26,-29,23,-24,-25,23,-27,23,23,23,]),'U16':([72,84,],[88,88,]),'U64':([72,84,],[89,89,]),'IF':([7,8,9,11,12,13,17,18,37,38,55,70,95,102,103,],[15,-3,-8,-9,-7,15,-11,-10,-2,-4,-14,-12,-13,-30,-31,]),'ID':([10,15,16,22,41,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,97,99,],[27,27,40,27,40,-60,-66,-62,-61,-69,76,-63,-67,-68,-65,-64,-22,27,-23,27,27,-28,27,-26,-29,27,-24,-25,27,-27,27,27,27,]),'NE':([21,23,24,25,26,27,28,30,32,33,34,35,73,75,76,78,79,80,82,98,],[-55,-53,-52,-51,-48,-47,-54,-56,-46,-43,61,-50,-49,-58,-57,-44,-45,-42,-41,-59,]),'LT':([21,23,24,25,26,27,28,30,32,33,34,35,73,75,76,78,79,80,82,98,],[-55,-53,-52,-51,-48,-47,-54,-56,-46,-43,66,-50,-49,-58,-57,-44,-45,-42,-41,-59,]),'GE':([21,23,24,25,26,27,28,30,32,33,34,35,73,75,76,78,79,80,82,98,],[-55,-53,-52,-51,-48,-47,-54,-56,-46,-43,69,-50,-49,-58,-57,-44,-45,-42,-41,-59,]),'LOR':([19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,73,75,76,78,79,80,81,82,98,],[-18,-17,-55,-53,-52,-51,-48,-47,-54,-56,58,-46,-43,-19,-50,-49,-58,-57,-44,-45,-42,-20,-41,-59,]),'LAND':([19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,73,75,76,78,79,80,81,82,98,],[-18,-17,-55,-53,-52,-51,-48,-47,-54,-56,56,-46,-43,-19,-50,-49,-58,-57,-44,-45,-42,-20,-41,-59,]),'XOREQUAL':([27,],[48,]),'DIVEQUAL':([27,],[50,]),'ANDEQUAL':([27,],[51,]),'U32':([72,84,],[91,91,]),'COLON':([40,42,71,],[-40,72,84,]),'MAIN':([2,],[3,]),'U8':([72,84,],[90,90,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'logicalExpr':([10,15,57,97,99,],[19,19,19,19,19,]),'relationalExpr':([10,15,57,97,99,],[20,20,20,20,20,]),'arithExpr2':([10,15,22,57,59,60,62,65,68,74,97,99,],[33,33,33,33,78,79,33,33,33,33,33,33,]),'iterationStmt':([7,13,],[11,11,]),'variable':([16,41,],[42,71,]),'declaration':([7,13,],[12,12,]),'dataType':([72,84,],[87,96,]),'stmt_list':([7,13,],[14,36,]),'arithExpr':([10,15,22,57,62,65,68,74,97,99,],[34,34,43,34,80,81,82,94,34,34,]),'number':([10,15,22,49,57,59,60,62,65,68,74,97,99,],[26,26,26,75,26,26,26,26,26,26,26,26,26,]),'stmt':([7,13,],[13,13,]),'rbrace':([14,],[37,]),'crate':([0,],[1,]),'conditionStmt':([10,15,],[29,39,]),'expression':([10,15,57,97,99,],[31,31,77,100,101,]),'logicalOp':([31,],[57,]),'selectionStmt':([7,13,],[9,9,]),'empty':([7,13,],[17,17,]),'compoundStmt':([5,7,13,29,39,83,],[6,18,18,55,70,95,]),'arithExpr3':([10,15,22,57,59,60,62,65,68,74,97,99,],[32,32,32,32,32,32,32,32,32,32,32,32,]),'unaryOperator':([27,],[49,]),'lbrace':([5,7,13,29,39,83,],[7,7,7,7,7,7,]),'relationalOp':([34,],[65,]),'unaryOperation':([10,15,22,57,59,60,62,65,68,74,97,99,],[35,35,35,35,35,35,35,35,35,35,35,35,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> crate","S'",1,None,None,None),
  ('crate -> FN MAIN LPAREN RPAREN compoundStmt','crate',5,'p_crate','MyParser.py',232),
  ('compoundStmt -> lbrace stmt_list rbrace','compoundStmt',3,'p_compoundStmt','MyParser.py',241),
  ('lbrace -> LBRACE','lbrace',1,'p_lbrace','MyParser.py',251),
  ('rbrace -> RBRACE','rbrace',1,'p_rbrace','MyParser.py',259),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','MyParser.py',265),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','MyParser.py',266),
  ('stmt -> declaration','stmt',1,'p_stmt','MyParser.py',274),
  ('stmt -> selectionStmt','stmt',1,'p_stmt','MyParser.py',275),
  ('stmt -> iterationStmt','stmt',1,'p_stmt','MyParser.py',276),
  ('stmt -> compoundStmt','stmt',1,'p_stmt','MyParser.py',277),
  ('stmt -> empty','stmt',1,'p_stmt','MyParser.py',278),
  ('selectionStmt -> IF conditionStmt compoundStmt','selectionStmt',3,'p_selectionStmt','MyParser.py',287),
  ('selectionStmt -> IF conditionStmt compoundStmt ELSE compoundStmt','selectionStmt',5,'p_selectionStmt','MyParser.py',288),
  ('iterationStmt -> WHILE conditionStmt compoundStmt','iterationStmt',3,'p_iterationStmt','MyParser.py',297),
  ('conditionStmt -> expression','conditionStmt',1,'p_conditionStmt','MyParser.py',304),
  ('conditionStmt -> expression logicalOp expression','conditionStmt',3,'p_conditionStmt','MyParser.py',305),
  ('expression -> relationalExpr','expression',1,'p_expression','MyParser.py',311),
  ('expression -> logicalExpr','expression',1,'p_expression','MyParser.py',312),
  ('expression -> arithExpr','expression',1,'p_expression','MyParser.py',313),
  ('relationalExpr -> arithExpr relationalOp arithExpr','relationalExpr',3,'p_relationalExpr','MyParser.py',319),
  ('logicalExpr -> arithExpr relationalOp arithExpr','logicalExpr',3,'p_logicalExpr','MyParser.py',325),
  ('logicalOp -> LAND','logicalOp',1,'p_logicalOp','MyParser.py',331),
  ('logicalOp -> LOR','logicalOp',1,'p_logicalOp','MyParser.py',332),
  ('relationalOp -> LT','relationalOp',1,'p_relationalOp','MyParser.py',338),
  ('relationalOp -> GT','relationalOp',1,'p_relationalOp','MyParser.py',339),
  ('relationalOp -> LE','relationalOp',1,'p_relationalOp','MyParser.py',340),
  ('relationalOp -> GE','relationalOp',1,'p_relationalOp','MyParser.py',341),
  ('relationalOp -> NE','relationalOp',1,'p_relationalOp','MyParser.py',342),
  ('relationalOp -> EQ','relationalOp',1,'p_relationalOp','MyParser.py',343),
  ('declaration -> LET variable COLON dataType EQUALS expression SEMI','declaration',7,'p_declaration','MyParser.py',349),
  ('declaration -> LET MUT variable COLON dataType EQUALS expression SEMI','declaration',8,'p_declaration','MyParser.py',350),
  ('dataType -> I8','dataType',1,'p_dataType','MyParser.py',366),
  ('dataType -> I16','dataType',1,'p_dataType','MyParser.py',367),
  ('dataType -> I32','dataType',1,'p_dataType','MyParser.py',368),
  ('dataType -> I64','dataType',1,'p_dataType','MyParser.py',369),
  ('dataType -> U8','dataType',1,'p_dataType','MyParser.py',370),
  ('dataType -> U16','dataType',1,'p_dataType','MyParser.py',371),
  ('dataType -> U32','dataType',1,'p_dataType','MyParser.py',372),
  ('dataType -> U64','dataType',1,'p_dataType','MyParser.py',373),
  ('variable -> ID','variable',1,'p_variable','MyParser.py',382),
  ('arithExpr -> arithExpr PLUS arithExpr','arithExpr',3,'p_arithExpr','MyParser.py',389),
  ('arithExpr -> arithExpr MINUS arithExpr','arithExpr',3,'p_arithExpr','MyParser.py',390),
  ('arithExpr -> arithExpr2','arithExpr',1,'p_arithExpr','MyParser.py',391),
  ('arithExpr2 -> arithExpr2 TIMES arithExpr2','arithExpr2',3,'p_arithExpr2','MyParser.py',397),
  ('arithExpr2 -> arithExpr2 DIVIDE arithExpr2','arithExpr2',3,'p_arithExpr2','MyParser.py',398),
  ('arithExpr2 -> arithExpr3','arithExpr2',1,'p_arithExpr2','MyParser.py',399),
  ('arithExpr3 -> ID','arithExpr3',1,'p_arithExpr3','MyParser.py',405),
  ('arithExpr3 -> number','arithExpr3',1,'p_arithExpr3','MyParser.py',406),
  ('arithExpr3 -> LPAREN arithExpr RPAREN','arithExpr3',3,'p_arithExpr3','MyParser.py',407),
  ('arithExpr3 -> unaryOperation','arithExpr3',1,'p_arithExpr3','MyParser.py',408),
  ('number -> BYTE_CONST','number',1,'p_number','MyParser.py',414),
  ('number -> INT_CONST_DEC','number',1,'p_number','MyParser.py',415),
  ('number -> INT_CONST_OCT','number',1,'p_number','MyParser.py',416),
  ('number -> INT_CONST_HEX','number',1,'p_number','MyParser.py',417),
  ('number -> INT_CONST_BIN','number',1,'p_number','MyParser.py',418),
  ('number -> FLOAT_CONST','number',1,'p_number','MyParser.py',419),
  ('unaryOperation -> ID unaryOperator ID','unaryOperation',3,'p_unaryOperation','MyParser.py',424),
  ('unaryOperation -> ID unaryOperator number','unaryOperation',3,'p_unaryOperation','MyParser.py',425),
  ('unaryOperation -> ID unaryOperator LPAREN arithExpr RPAREN','unaryOperation',5,'p_unaryOperation','MyParser.py',426),
  ('unaryOperator -> PLUSEQUAL','unaryOperator',1,'p_unaryOperator','MyParser.py',432),
  ('unaryOperator -> MINUSEQUAL','unaryOperator',1,'p_unaryOperator','MyParser.py',433),
  ('unaryOperator -> TIMESEQUAL','unaryOperator',1,'p_unaryOperator','MyParser.py',434),
  ('unaryOperator -> DIVEQUAL','unaryOperator',1,'p_unaryOperator','MyParser.py',435),
  ('unaryOperator -> MODULUSEQUAL','unaryOperator',1,'p_unaryOperator','MyParser.py',436),
  ('unaryOperator -> LSHIFTEQUAL','unaryOperator',1,'p_unaryOperator','MyParser.py',437),
  ('unaryOperator -> RSHIFTEQUAL','unaryOperator',1,'p_unaryOperator','MyParser.py',438),
  ('unaryOperator -> ANDEQUAL','unaryOperator',1,'p_unaryOperator','MyParser.py',439),
  ('unaryOperator -> OREQUAL','unaryOperator',1,'p_unaryOperator','MyParser.py',440),
  ('unaryOperator -> XOREQUAL','unaryOperator',1,'p_unaryOperator','MyParser.py',441),
  ('empty -> <empty>','empty',0,'p_empty','MyParser.py',445),
]
