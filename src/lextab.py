# lextab.py. This file automatically created by PLY (version 3.11). Don't edit!
_tabversion   = '3.10'
_lextokens    = set(('ABSTRACT', 'ALIGNOF', 'AND', 'ANDEQUAL', 'ARROW', 'AS', 'BECOME', 'BOX', 'BREAK', 'BYTE_CONST', 'CATCH', 'CHAR_CONST', 'COLON', 'COMMA', 'CONDOP', 'CONST', 'CONTINUE', 'CRATE', 'DEFAULT', 'DIVEQUAL', 'DIVIDE', 'DO', 'DOTDOT', 'ELLIPSIS', 'ELSE', 'ENUM', 'EQ', 'EQUALS', 'EXTERN', 'FALSE', 'FINAL', 'FLOAT_CONST', 'FN', 'FOR', 'GE', 'GT', 'ID', 'IF', 'IMPL', 'IN', 'INNER_DOC_COMMENT', 'INT_CONST_BIN', 'INT_CONST_DEC', 'INT_CONST_HEX', 'INT_CONST_OCT', 'LAND', 'LBRACE', 'LBRACKET', 'LE', 'LET', 'LOOP', 'LOR', 'LPAREN', 'LSHIFT', 'LSHIFTEQUAL', 'LT', 'MACRO', 'MATCH', 'MATCHEQUAL', 'MINUS', 'MINUSEQUAL', 'MOD', 'MODULUS', 'MODULUSEQUAL', 'MOVE', 'MUT', 'NE', 'NOT', 'OFFSETOF', 'OR', 'OREQUAL', 'OUTER_DOC_COMMENT', 'OVERRIDE', 'PATTERNATCHAR', 'PERIOD', 'PLUS', 'PLUSEQUAL', 'PRIV', 'PROC', 'PUB', 'PURE', 'RBRACE', 'RBRACKET', 'REF', 'RETURN', 'RPAREN', 'RSHIFT', 'RSHIFTEQUAL', 'SELF', 'SEMI', 'SHEBANG', 'SHEBANG_LINE', 'SIZEOF', 'STATIC', 'STATIC_LIFETIME', 'STRING_LITERAL', 'STRUCT', 'SUPER', 'TIMES', 'TIMESEQUAL', 'TRAIT', 'TRUE', 'TYPE', 'TYPEID', 'TYPEOF', 'UNDERSCORE', 'UNION', 'UNSAFE', 'UNSIZED', 'USE', 'VIRTUAL', 'WHERE', 'WHILE', 'XOR', 'XOREQUAL', 'YIELD'))
_lexreflags   = 64
_lexliterals  = ''
_lexstateinfo = {'INITIAL': 'inclusive'}
_lexstatere   = {'INITIAL': [('(?P<t_NEWLINE>\\n+)|(?P<t_LBRACE>\\{)|(?P<t_RBRACE>\\})|(?P<t_FLOAT_CONST>((((([0-9]*\\.[0-9]+))([eE][-+]?[0-9]+)?)|([0-9]+([eE][-+]?[0-9]+)))+((f32) | (f64))?))|(?P<t_INT_CONST_HEX>0x[0-9a-fA-F]+((u8) | (u16) | (u32) | (u64) | (i8) | (i16) | (i32) | (i64))?)|(?P<t_INT_CONST_BIN>0b[0-1]+((u8) | (u16) | (u32) | (u64) | (i8) | (i16) | (i32) | (i64))?)|(?P<t_BAD_CONST_OCT>0o[0-7]*[89])|(?P<t_INT_CONST_OCT>0o[0-7]*((u8) | (u16) | (u32) | (u64) | (i8) | (i16) | (i32) | (i64))?)|(?P<t_INT_CONST_DEC>[0-9]+((u8) | (u16) | (u32) | (u64) | (i8) | (i16) | (i32) | (i64))?)|(?P<t_CHAR_CONST>\'([^\'\\\\\\n]|(\\\\(([a-zA-Z._!=&\\^\\-\\\\?\'"])|(\\d+)|(x[0-9a-fA-F]+))))\')|(?P<t_UNMATCHED_QUOTE>(\'([^\'\\\\\\n]|(\\\\(([a-zA-Z._!=&\\^\\-\\\\?\'"])|(\\d+)|(x[0-9a-fA-F]+))))*\\n)|(\'([^\'\\\\\\n]|(\\\\(([a-zA-Z._!=&\\^\\-\\\\?\'"])|(\\d+)|(x[0-9a-fA-F]+))))*$))|(?P<t_BAD_CHAR_CONST>(\'([^\'\\\\\\n]|(\\\\(([a-zA-Z._!=&\\^\\-\\\\?\'"])|(\\d+)|(x[0-9a-fA-F]+))))[^\'\n]+\')|(\'\')|(\'([\\\\][^a-zA-Z._~^!=&\\^\\-\\\\?\'"x0-7])[^\'\\n]*\'))|(?P<t_BAD_STRING_LITERAL>"([^"\\\\\\n]|(\\\\(([a-zA-Z._!=&\\^\\-\\\\?\'"])|(\\d+)|(x[0-9a-fA-F]+))))*?([\\\\][^a-zA-Z._~^!=&\\^\\-\\\\?\'"x0-7])([^"\\\\\\n]|(\\\\(([a-zA-Z._!=&\\^\\-\\\\?\'"])|(\\d+)|(x[0-9a-fA-F]+))))*")|(?P<t_ID>[a-zA-Z\\x80-\\xff_][a-zA-Z0-9\\x80-\\xff_]*)|(?P<t_STRING_LITERAL>"([^"\\\\\\n]|(\\\\(([a-zA-Z._!=&\\^\\-\\\\?\'"])|(\\d+)|(x[0-9a-fA-F]+))))*")|(?P<t_ELLIPSIS>\\.\\.\\.)|(?P<t_DOTDOT>\\.\\.)|(?P<t_LOR>\\|\\|)|(?P<t_OREQUAL>\\|=)|(?P<t_RSHIFTEQUAL>>>=)|(?P<t_TIMESEQUAL>\\*=)|(?P<t_LSHIFTEQUAL><<=)|(?P<t_XOREQUAL>\\^=)|(?P<t_PLUSEQUAL>\\+=)|(?P<t_XOR>\\^)|(?P<t_MODULUSEQUAL>%=)|(?P<t_DIVEQUAL>/=)|(?P<t_LBRACKET>\\[)|(?P<t_RBRACKET>\\])|(?P<t_LSHIFT><<)|(?P<t_NE>!=)|(?P<t_LAND>&&)|(?P<t_LPAREN>\\()|(?P<t_CONDOP>\\?)|(?P<t_PERIOD>\\.)|(?P<t_GE>>=)|(?P<t_MATCHEQUAL>=>)|(?P<t_OR>\\|)|(?P<t_MINUSEQUAL>-=)|(?P<t_ANDEQUAL>&=)|(?P<t_ARROW>->)|(?P<t_EQ>==)|(?P<t_TIMES>\\*)|(?P<t_RPAREN>\\))|(?P<t_RSHIFT>>>)|(?P<t_LE><=)|(?P<t_PLUS>\\+)|(?P<t_MINUS>-)|(?P<t_DIVIDE>/)|(?P<t_MODULUS>%)|(?P<t_COMMA>,)|(?P<t_NOT>!)|(?P<t_SEMI>;)|(?P<t_GT>>)|(?P<t_AND>&)|(?P<t_COLON>:)|(?P<t_LT><)|(?P<t_PATTERNATCHAR>@)|(?P<t_EQUALS>=)', [None, ('t_NEWLINE', 'NEWLINE'), ('t_LBRACE', 'LBRACE'), ('t_RBRACE', 'RBRACE'), ('t_FLOAT_CONST', 'FLOAT_CONST'), None, None, None, None, None, None, None, None, None, None, None, ('t_INT_CONST_HEX', 'INT_CONST_HEX'), None, None, None, None, None, None, None, None, None, ('t_INT_CONST_BIN', 'INT_CONST_BIN'), None, None, None, None, None, None, None, None, None, ('t_BAD_CONST_OCT', 'BAD_CONST_OCT'), ('t_INT_CONST_OCT', 'INT_CONST_OCT'), None, None, None, None, None, None, None, None, None, ('t_INT_CONST_DEC', 'INT_CONST_DEC'), None, None, None, None, None, None, None, None, None, ('t_CHAR_CONST', 'CHAR_CONST'), None, None, None, None, None, None, ('t_UNMATCHED_QUOTE', 'UNMATCHED_QUOTE'), None, None, None, None, None, None, None, None, None, None, None, None, None, None, ('t_BAD_CHAR_CONST', 'BAD_CHAR_CONST'), None, None, None, None, None, None, None, None, None, None, ('t_BAD_STRING_LITERAL', 'BAD_STRING_LITERAL'), None, None, None, None, None, None, None, None, None, None, None, None, None, ('t_ID', 'ID'), (None, 'STRING_LITERAL'), None, None, None, None, None, None, (None, 'ELLIPSIS'), (None, 'DOTDOT'), (None, 'LOR'), (None, 'OREQUAL'), (None, 'RSHIFTEQUAL'), (None, 'TIMESEQUAL'), (None, 'LSHIFTEQUAL'), (None, 'XOREQUAL'), (None, 'PLUSEQUAL'), (None, 'XOR'), (None, 'MODULUSEQUAL'), (None, 'DIVEQUAL'), (None, 'LBRACKET'), (None, 'RBRACKET'), (None, 'LSHIFT'), (None, 'NE'), (None, 'LAND'), (None, 'LPAREN'), (None, 'CONDOP'), (None, 'PERIOD'), (None, 'GE'), (None, 'MATCHEQUAL'), (None, 'OR'), (None, 'MINUSEQUAL'), (None, 'ANDEQUAL'), (None, 'ARROW'), (None, 'EQ'), (None, 'TIMES'), (None, 'RPAREN'), (None, 'RSHIFT'), (None, 'LE'), (None, 'PLUS'), (None, 'MINUS'), (None, 'DIVIDE'), (None, 'MODULUS'), (None, 'COMMA'), (None, 'NOT'), (None, 'SEMI'), (None, 'GT'), (None, 'AND'), (None, 'COLON'), (None, 'LT'), (None, 'PATTERNATCHAR'), (None, 'EQUALS')])]}
_lexstateignore = {'INITIAL': ' \t'}
_lexstateerrorf = {'INITIAL': 't_error'}
_lexstateeoff = {}
